/***********************************************************************************************************

MAC122 - Principios de Desenvolvimento de Algoritmos
IME - USP - Segundo semestre de 2009
Turma 45 - Prof. Carlos E. Ferreira

Quinto Exercicio-programa: O Jogo do Hex
Arquivo EP5.c

Alunos:								Numero USP:
Caio Salgado
Gustavo Perez Katague				6797143
Thiago de Gouveia Nunes				6797289
Wilson Kazuo Mizutani				6797230

13/12/2009

************************************************************************************************************
	Observacoes:
		-

***********************************************************************************************************/

#include <stdlib.h>
#include <stdio.h>

/***********************************************************************************************************

	I. DEFINICOES E ESTRUTURAS BASICAS.

***********************************************************************************************************/

#define FALSE	0
#define TRUE	1

#define NULO	-1

/* Valores associados 'as pecas (ou ausencia delas) no tabuleiro. */
#define VAZIO	0
#define BRANCO	1
#define PRETO	2

/* Nao sei. */
#define B_LINK	3
#define P_LINK	4
#define LENGTH	14

/* Estrutura jogada definida no enunciado. */
typedef struct _jogada {
	int i, j;
} jogada;

/* Estrutura que representa um jogador. */
typedef struct {
	char color;
} Player;

/*
	A funcao newJogada() retorna o valor de uma nova jogada como especificado pelos
parametros.
 */
jogada newJogada(int i, int j)
{
	jogada jog;

	jog.i = i;
	jog.j = j;

	return jog;
}

/* Os jogadores. */
static Player hexAI, oponent;

/***********************************************************************************************************

	II. TABULEIRO E FUNCOES DE MANIPULACAO DO TABULEIRO.

***********************************************************************************************************/

typedef struct {
	char	val, link;
} Connection;

/* Estrutura que representa uma celula do tabuleiro. */
typedef struct {
	char		color; /* Cor da peca que esta' na celula. */
	/*Connection	con[4];*/
	jogada		threat; /* Jogada a ser executada se o oponente por sua peca nessa celula. */
	char		connection[2]; /* Nivel de conectividade com cada jogador. */
} Cell;

/*
	A funcao newCell() retorna o valor de uma nova celula vazia.
*/
Cell newCell()
{
	Cell cell;
	/*register int i;*/
	
	cell.color = VAZIO;
	cell.threat = newJogada(-1,-1);
	cell.connection[0] = cell.connection[1] = 0;
	
	
	/*for(i = 0; i < 4; i++)
		cell.con[i].val = (cell.con[i].link = 0)-1;*/
	
	return cell;
}

/* Tabuleiro. */
static Cell board[LENGTH][LENGTH];

/*
	A funcao initBoard() inicializa o tabuleiro com celulas vazias.
*/
void initBoard()
{
	register int i;
	for(i = 0; i < LENGTH*LENGTH; i++)
		board[i/LENGTH][i%LENGTH] = newCell();
}

void printBoard()
{
	register int i, j;
	for(j = 0; j < LENGTH; j++) {
		for(i = 0; i < LENGTH; i++)
			printf("%02d ", board[j][i].color);
		printf("\n");
	}
}

/*
	A funcao whithinBoard() diz se a jogada jog esta' dentro ou fora do tabuleiro,
retornando TRUE ou FALSE, respectivamente.
*/
int whithinBoard(jogada jog)
{
	return (jog.i >= 0 && jog.j >= 0 && jog.i < LENGTH && jog.j < LENGTH);
}

/*
	A funcao freeCell() diz se a jogada jog esta' em uma celula vazia, retornando
TRUE nesse caso, e FALSE caso contrario.
*/
int freeCell(jogada jog)
{
	return (board[jog.j][jog.i].color == VAZIO);
}

/*
	A funcao isValid() diz se a jogada jog e' valida, isso e', se ela esta' em uma
celula vaiza dentro do tabuleiro, retornando TRUE nesse caso e FALSE caso contrario.
*/
int isValid(jogada jog)
{
	return (whithinBoard(jog) && freeCell(jog));
}

/*
	A funcao place() coloca uma peca o jogador player na celula do tabuleiro indicada
pela jogada jog.
*/
void place(jogada jog, int player)
{
	board[jog.j][jog.i].color = player;
}

/*
	A funcao getCell() retorna a celula do tabuleiro indicada pela jogada jog.
*/
Cell getCell(jogada jog)
{
	return board[jog.j][jog.i];
}

/*
	A funcao getCellP() retorna um ponteiro para a celula do tabuleiro indicada pela
jogada jog.
*/
Cell* getCellP(jogada jog)
{
	return &board[jog.j][jog.i];
}

/*
	A funcao playerAt() retorna a cor da peca que esta' na celula indicada pela jogada
jog do tabuleiro.
*/
int playerAt(jogada jog)
{
	return getCell(jog).color;
}

/***********************************************************************************************************

	III. DEFINICAO E RECONHECIMENTO DE PADROES.

***********************************************************************************************************/

#define NUM_BRIDGES	3

#define	NUM_TEMP_LV	4

#define NUM_TEMP_L1	4
#define NUM_TEMP_L2	8
#define NUM_TEMP_L3	8
#define NUM_TEMP_L4	4

#define LEN_TEMP_L1	2
#define LEN_TEMP_L2	5
#define LEN_TEMP_L3	8
#define LEN_TEMP_L4	10

/* Uma matriz 10x10 representa um molde de padrao no tabuleiro. */
typedef char PatternTable[10][10];

/* Estrutura que representa um padrao. */
typedef struct {
	PatternTable	P; /* O molde. */
	int				n, m; /* Dimensoes do padrao. */
	jogada			ref, /* Posicao relativa da peca-chave. */
					threat[10][10]; /* Jogadas-resposta a ameacas do oponente. */
} Pattern;

void initThreat(jogada threat[10][10])
{
	register int	i, j;
	jogada 			nulo = newJogada(-1,-1);
	
	for(j = 0; j < 10; j++)
		for(i = 0; i < 10; i++)
			threat[j][i] = nulo;
}

void copy(PatternTable to, const PatternTable from, int m, int n)
{
	register int i, j;
	for(j = 0; j < m; j++)
		for(i = 0; i < n; i++)
			to[j][i] = from[j][i];
}

void printPattern(Pattern pattern)
{
	register int i, j;
	for(j = 0; j < pattern.m; j++) {
		for(i = 0; i < pattern.n; i++)
			printf("%02d ", pattern.P[j][i]);
		printf("\n");
	}
}

static const char			bridge[3][3][3] =
							{
								{
									{1, 0},
									{0, 1}
								},
								{
								 	{-1, 1,  0},
									{ 0, 1, -1}
								},
								{ 
									{-1,  0},
									{ 1,  1},
									{ 0, -1}
								}
							};
static const PatternTable	template2 =
							{
								{-1, 1},
								{ 0, 0}
							},
							template3a =
							{
								{-1, -1,  1,  0, -1},
								{-1,  0,  0,  0, -1},
								{ 0,  0,  0,  0, -1}
							},
							template3b	=
							{
								{-1, -1,  0,  1,  0},
								{-1,  0,  0,  0,  0},
								{ 0,  0, -1,  0,  0}
							},
							template4a =
							{
								{-1, -1, -1, -1,  1,  0, -1, -1},
								{-1, -1,  0,  0,  0,  0,  0, -1},
								{-1,  0,  0,  0,  0,  0,  0, -1},
								{ 0,  0,  0,  0,  0,  0,  0, -1}
							},
							template4b =
							{
								{-1, -1, -1, -1,  0,  1,  0, -1},
								{-1, -1,  0,  0,  0,  0,  0,  0},
								{-1,  0,  0,  0, -1,  0,  0,  0},
								{ 0,  0,  0,  0,  0,  0,  0,  0}
							},
							template5 =
							{
								{-1, -1, -1, -1, -1,  0,  1,  0, -1, -1},
								{-1, -1, -1, -1,  0,  0,  0,  0,  0, -1},
								{-1, -1,  0,  0,  0,  0,  0,  0,  0,  0},
								{-1,  0,  0,  0,  0,  0,  0,  0,  0,  0},
								{ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
							};


Pattern initGenericTemplate(int n, int m, const PatternTable P, jogada ref)
{
	Pattern template;
	
	template.n = n;
	template.m = m;
	
	copy(template.P, P, n, m);
	
	template.ref = ref;
	
	initThreat(template.threat);
	
	return template;
}

Pattern initTemplate2()
{
	Pattern template = initGenericTemplate(2, 2, template2, newJogada(-1,0));
	
	template.threat[1][0] = newJogada(1, 0);
	template.threat[1][1] = newJogada(-1, 0);
	
	return template;
}

Pattern initTemplate3a()
{
	Pattern template = initGenericTemplate(5, 3, template3a, newJogada(-2,0));
	
	template.threat[0][3] = newJogada(-2, 2);
	template.threat[1][1] = newJogada(1, 0);
	template.threat[1][2] = newJogada(-1, 0);
	template.threat[1][3] = newJogada(-2, 1);
	template.threat[2][0] = newJogada(1, 0);
	template.threat[2][1] = newJogada(2, -1);
	template.threat[2][2] = newJogada(-1, 0);
	template.threat[2][3] = newJogada(-2, 0);
	
	return template;
}

/* Kakinha. */
#define TEMPLATE_2 	0
#define TEMPLATE_3A	1
#define TEMPLATE_3B	2
#define TEMPLATE_4A	3
#define TEMPLATE_4B	4
#define TEMPLATE_5	5

static Pattern	templates[6];

void initTemplates()
{
	templates[TEMPLATE_2] = initTemplate2();
	templates[TEMPLATE_3A] = initTemplate3a();
}

#define HORIZONTAL_FLIP	1 /* (01)b2 */
#define VERTICAL_FLIP	2 /* (10)b2 */


/*
	flippedPattern = flip(pattern, HORIZONTAL_FLIP | VERTICAL_FLIP)
*/
Pattern flip(Pattern pattern, int flipFlags)
{
	Pattern			flipped;
	register int	i, j;
	
	flipped.m = pattern.m;
	flipped.n = pattern.n;
	
	if(flipFlags == (HORIZONTAL_FLIP | VERTICAL_FLIP))
		for(j = 0; j < pattern.m; j++)
			for(i = 0; i < pattern.n; i++)
				flipped.P[j][i] = pattern.P[pattern.m-j-1][pattern.n-i-1];
	else if(flipFlags == HORIZONTAL_FLIP)
		for(j = 0; j < pattern.m; j++)
			for(i = 0; i < pattern.n; i++)
				flipped.P[j][i] = pattern.P[j][pattern.n-i-1];
	else if(flipFlags == VERTICAL_FLIP)
		for(j = 0; j < pattern.m; j++)
			for(i = 0; i < pattern.n; i++)
				flipped.P[j][i] = pattern.P[pattern.m-j-1][i];
	else
		for(j = 0; j < pattern.m; j++)
			for(i = 0; i < pattern.n; i++)
				flipped.P[j][i] = pattern.P[j][i];
				
	return flipped;
}

Pattern turn(Pattern pattern)
{
	Pattern 	turned;
	register	int i, j;
	
	turned.m = pattern.n;
	turned.n = pattern.m;
	
	for(j = 0; j < pattern.n; j++)
		for(i = 0; i < pattern.m; i++)
			turned.P[j][i] = pattern.P[i][j];
	
	return turned;
}

int isPattern(jogada jog, Pattern pattern)
{
	register jogada aux;
	register int i, j, p;

	if(!whithinBoard(jog) || playerAt(jog) != hexAI.color)
		return FALSE;

	aux = jog;

	aux.j -= pattern.ref.j;
	aux.i -= pattern.ref.i;

	for(j = 0; j < pattern.m; j++)
		for(i = 0; i < pattern.n; i++)
			if( (p = pattern.P[j][i]) >= 0) {
				if( !p && board[aux.j+j][aux.i+i].color != VAZIO ) {
					printf("Not enough space.\n");
					return FALSE;
				}
				else if( p && board[aux.j+j][aux.i+i].color != hexAI.color ) {
					printf("Enemy intruded at %d %d.\n", aux.i+i, aux.j+j);
					return FALSE;
				}
			}
	
	return TRUE;

}

void checkTemplates2()
{
	jogada	jog;
	Pattern	pattern;
	
	pattern = templates[TEMPLATE_2];
	
	for(jog.i = 0, jog.j = LENGTH-2; jog.i < LENGTH; jog.i++)
		if(isPattern(jog, pattern))
			getCellP(jog)->connection[BRANCO-1] = -TEMPLATE_2,
			printf("Template detected at %d %d\n", jog.i, jog.j);
}


/***********************************************************************************************************

	IV. FUNCOES AUXILIARES DA A.I.

***********************************************************************************************************/

#define JOGADOR(a)	a == BRANCO ? "branco" : "preto"
#define INVERSO(a)	!(a - 1) + 1 /*a+1-2*(a==PRETO)*/ /* Creditos para Henrique. */
#define D1			0
#define D2			1
#define D3			2
#define D4			3
#define D5			4
#define D6			5
#define QMAX		200



static int pieTime = TRUE;

typedef struct {
	jogada	get[QMAX];
	int 	init, end;
} Queue;

Queue newQueue()
{
	Queue Q;
	Q.init = Q.end = 0;
	return Q;
}

void qAdd(Queue *pQ, jogada jog)
{
	pQ->get[pQ->end++] = jog;
	pQ->end %= QMAX;
}

jogada qRemove(Queue *pQ)
{
	jogada jog = pQ->get[pQ->init++];
	pQ->init %= QMAX;
	return jog;
}

jogada inDir(jogada jog, char dir)
{
	jogada jg = jog;

	jg.i += ((dir == D1) || (dir == D6)) - ((dir == D3 || dir == D4));
	jg.j += ((dir == D2) || (dir == D3)) - ((dir == D5 || dir == D6));

	return jg;
}

void seeConnections()
{
	jogada	jog, dirJog;
	Queue	Q = newQueue();
	Cell	*cell, *dirCell;
	char	aux[LENGTH][LENGTH], dir;
	register int i;

	/* Inicializa matriz auxiliar. */
	for(i = 0; i < LENGTH*LENGTH; i++)
		aux[i/LENGTH][i%LENGTH] = 0;

	/* Verifica primeira linha. */
	for(jog.j = jog.i = 0; jog.i < LENGTH; jog.i++) {
		if(playerAt(jog) == VAZIO)
			qAdd(&Q,jog);
		aux[jog.j][jog.i] = 1;
		cell = getCellP(jog);
		/*cell->con[0].val = 0;*/
	}
	
	/*printf("%d-%d\n", Q.init, Q.end);
	for(i = Q.init; i < Q.end; i++)
		printf("%d %d\n", Q.get[i].i, Q.get[i].j);*/

	i = 2;
	while(Q.init != Q.end) {
		jog = qRemove(&Q);
		for(dir = D1; dir <= D6; dir++) {
			dirJog = inDir(jog, dir);
			if(whithinBoard(dirJog)) {
				/*printf("%d %d %d(%d)\n", dirJog.i, dirJog.j, aux[dirJog.j][dirJog.i], i);*/
				cell = getCellP(jog);
				dirCell = getCellP(dirJog);
				if(!aux[dirJog.j][dirJog.i])
					aux[dirJog.j][dirJog.i] = i,
					/*dirCell->con[0].val = cell->con[0].val+1,
					dirCell->con[0].link = cell->con[0].link,*/
					qAdd(&Q,dirJog);
				else if(aux[dirJog.j][dirJog.i] == i) {
					printf("!\n");
					/*if(dirCell->con[0].val + dirCell->con[0].link >= cell->con[0].val + cell->con[0].link + 1)
						dirCell->con[0].val--,
						dirCell->con[0].link++;*/
				}
			}
		}
		i++;
	}
}

/***********************************************************************************************************

	IV. FUNCOES DA A.I.

***********************************************************************************************************/




jogada thinkMove()
{
	jogada jog;

	return jog;
}

/***********************************************************************************************************

	(N-2). FUNCOES AUXILIARES DA INTERFACE DO JOGO.

***********************************************************************************************************/

void invertPlayers()
{
	hexAI.color = oponent.color;
	oponent.color = INVERSO(oponent.color);
}

/***********************************************************************************************************

	(N-1). FUNCOES DA INTERFACE DO JOGO.

***********************************************************************************************************/

void inicializaJogo(int time)
{
	hexAI.color = time;
	oponent.color = INVERSO(time);
	
	initTemplates();
}

jogada novaJogada()
{
	jogada jog = thinkMove();

	if(pieTime && hexAI.color == PRETO) {
		pieTime = FALSE;
		if(playerAt(jog) == oponent.color)
			invertPlayers();
	}

	place(jog, oponent.color);

	return jog;
}

void recebeJogada(jogada jog)
{
	if(!whithinBoard(jog)) {
		printf("Jogador %s executou uma jogada fora do tabuleiro.\n", JOGADOR(oponent.color));
		return;
	}

	if(pieTime && oponent.color == PRETO) {
		pieTime = FALSE;
		if(playerAt(jog) == hexAI.color) {
			invertPlayers();
			return;
		}
	}
	else if(!freeCell(jog)) {
			printf("Jogador %s executou uma jogada em uma posicao ja' ocupada.\n", JOGADOR(oponent.color));
			return;
	}

	place(jog, oponent.color);
}

/***********************************************************************************************************

	N. FUNCAO MAIN PARA TESTES.

***********************************************************************************************************/

int main(int argc, char **argv)
{
	jogada jog = newJogada(3, LENGTH-2);
	
	initBoard();
	
	inicializaJogo(BRANCO);
	
	printPattern(templates[TEMPLATE_2]);
	
	place(jog, BRANCO);
	
	printf("Is template: %d\n", isPattern(jog, templates[TEMPLATE_2]));
	
	printBoard();
	
	checkTemplates2();
	
	printf("%d\n", board[LENGTH-2][3].connection[BRANCO-1]);
	
	return 0;
}






