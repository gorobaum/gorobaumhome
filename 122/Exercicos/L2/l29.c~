#include <stdio.h>
#include <stdlib.h>

void imprimevetor( int v[], int n)
{
	int k;
	for ( k = 0; k < n; k++) printf("  %d", v[k]);
	printf("\n");
}

void bubblesort(int v[], int n )
{
	int i, aux, trocou, j;
	for ( trocou = 1, j = 0; j < n -1 && trocou; j++ ) 
		for ( i = 0, trocou = 0; i < n - 1 - j; i++) 
		if ( v[i] > v[i+1] )
			aux = v[i], v[i] = v[i+1], v[i+1] = aux, trocou = 1;					
}

void junta( int v[], int m, int s[], int n )
{
	int k, i, j, *w;
	w = malloc ( (n+m) * sizeof ( int ) );
	if ( w == NULL ) {
		printf("Memoria insulficiente \n");
		exit(0);
	}
	for ( i = 0, j = 0, k = 0; i < m && j < n; k++ ) {
		if ( v[i] <= s[j] ) w[k] = v[i++];
		else w[k] = s[j++];
	}
	if ( j == n ) 
	for ( k = i; k < m; k++) w[n+k] = v[i++];
	else if ( i == m )
	for ( k = j; k < n; k++) w[m+k] = s[j++];
	imprimevetor(w, (m+n));
}

void ordena(int v[], int n)
{
	int i, ind, m, x, *w, *t;
	if ( n > 1 ) {
		ind = 1;
		m = ind;
		x = n - ind;
		w = malloc( (m)*sizeof(int) );
		t = malloc( (x)*sizeof(int) );
		for	( i = 0; i < m; i++ ) w[i] = v[i];
		for ( i = 0; i < x; i++ ) t[i] = v[ind+i];
		ordena( w, m );
		ordena( t, x );
		bubblesort( w, m );
		bubblesort( t, x );
		junta( w, m, t, x );
	}
}

int main()
{
	int v[20], i, n;
	for (i = 0; i < 20; i ++ ) v[i] = rand()%100;
	imprimevetor( v, 20);
	n = 20;
	ordena( v, n);
	return 0;
}
