/*Nome Thiago de Gouveia Nunes  */
/*nusp 6797289                  */
/*Lista 5                       */

Exercicio 4 :

    A recorrencia e a mesma, so precisamos mudar o vetor e, colocando na posicao
e[i] a soma de a[i] com b[i], com a[i] e b[i] definidos como no enunciado.

O algoritmo fica :

ABB-ÓTIMA (e, n)
1    s[0] = 0
2    para i ← 1 até n faça
3        s[i] ← s[i−1] + e[i]
4    para i ← 1 até n+1 faça
5        c[i][i−1] ← 0
6    para l ← 1 até n faça
7        para i ← 1 até n−l+1 faça
8        j ← i+l−1
9        c[i][j] ← c[i+1][j]
10       para k ← i+1 até j faça
11          se c[i][k−1] + c[k+1][j] < c[i][j]
12          então c[i][j] ← c[i][k−1] + c[k+1][j]
13      c[i][j] ← c[i][j] + s[j] − s[i−1]
14  devolva c[1, n]

A complexidade do ABB-ÓTIMA é:

Linha           Tempo
1               O(1)
2               O(n)
3               O(n)
4               O(n+1)
5               O(n+1)
6               O(n)
7               O(n²)
8               O(n²)
9               O(n³)
10              O(n³)
11              O(n³)
12              O(n³)
13              O(n³)
14              O(1)
======================
Total           O(n³)

Exercicio 11 :

/*Dados do exercicio 11         */
/*username Gorobaum             */
/*password rajimema             */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define LINESIZE 1000

int CalcMinCuts(int cuts[], int numcut, int length){
    int c[LINESIZE][LINESIZE], i, j, k, l;

    for( i = 1; i <= numcut+1; i++ ) c[i][i-1] = 0;

    for( l = 1; l <= numcut; l++ ) {
        for( i = 1; i <= numcut-l+1; i++ ) {
            j = i+l-1;
            c[i][j] = c[i+1][j];
            for( k = i+1; k <= j; k++ )
                if (c[i][k-1] + c[k+1][j] < c[i][j] ) c[i][j] = c[i][k-1] + c[k+1][j];
            c[i][j] = c[i][j] + cuts[j+1] - cuts[i-1];
        }
    }
    return c[1][numcut];
}

int main() {
    int length, numcut, cuts[LINESIZE], i, aux, tam;
    char line[LINESIZE], str[LINESIZE];
    
    while ( (fgets(line, LINESIZE, stdin) != NULL) && line[0] != '0') {
        length = atoi(line);
        fgets(line, LINESIZE, stdin);
        numcut = atoi(line);
        fgets(line, LINESIZE, stdin);
        aux = 0;
        i = 1;
        while (sscanf(line+aux, "%s %n", str, &tam) == 1){
            cuts[i] = atoi(str);
            i++;
            aux += tam;
        }
        cuts[0] = 0;
        cuts[i] = length;
        printf("The minimum cutting is %d.\n", CalcMinCuts(cuts, numcut, length));
    }
    return 0;
}
