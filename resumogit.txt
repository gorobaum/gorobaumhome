Porque usar controle de versão :
	O git é programa para controle de versão. Um programa de controle 
de versão que controla todas as mudanças em arquivos pelo tempo. Com ele podemos
reverter mudanças feitas em arquivos e compartilhar as mudanças com outras
pessoas que também trabalham no projeto. Usaremos o git como controlador de
versões. As modificações ficam guardadas em repositórios.

Como iniciar um rep no git:
	O github tem um bom tutorial para instalar e iniciar o git nessa página
Windows -> http://help.github.com/win-set-up-git/
Linux   -> http://help.github.com/linux-set-up-git/
MacOS   -> http://help.github.com/mac-set-up-git/

Como usar o git :
	Agora que o git está instalado e o repositório já está criado, podemos
começar a modificar nosso projeto. Todo arquivo no git tem dois status: Tracked
e Untracked. Arquivos Tracked serão adicionados no próximo commit. Para verifica
o status de cada arquivos usamos o comando git status. O comando git commit adic-
iona os arquivos Tracked para o seu repositório. Toda vez que um arquivo é modi-
ficado ele é marcado como Untracked. Para mudar o status de um arquivo para 
Tracked usamos o comando git add <Nome-do-Arquivo>. O comando git diff mostra a 
diferença entre os arquivos Untracked e os Tracked. Um arquivo pode estar Tracked
e Untracked ao mesmo tempo se dermos git add nele, modificarmos ele, e executar-
mos o git status, ele vai mostrar o mesmo arquivo nas duas partes, a que mostra 
os arquivos que serão commitados e os que não serão. Isso quer dizer que a versão
não modificada do seu arquivo vai ser commitada, e não a mais nova. Para corrigir
isso teriamos que dar git add no mesmo arquivo. Para remover um arquivo do git 
usamos o comando git rm <Nome-do-Arquivo>. O comando git mv file_from file_to 
move um arquivo.
	O git commit só modifica os arquivos no seu repositorio local. Precisamos 
usar o comando git push para mandar as modificações para o repositorio no github.
Se a sua versão for mais nova que a do repositorio, o seu push será feito e as 
modificações serão feitas. Se não, usamos o comando git pull para pegar a versão
mais nova do repositorio e dar um merge com o nosso repositorio. Se houver
algum problema com o merge, por exemplo um arquivo que você modificou foi modi-
ficado no repositorio no github, você terá que abrir o arquivo e modifica-lo
manualmente para arrumá-lo. Depois disso, o git push poderá ser executado sem
problema.

Resumo dos comandos ( e alguns novos ) :
$ git clone -> Copia um repositorio remoto para a atual localização.
$ git add <Arquivo> -> Adiciona o arquivo para ser commitado.
$ git commit -> Comita as atuais modificações para o seu repositorio local.
$ git push -> Mandas os atuais commits para o repositorio remoto.
$ git pull -> Puxa os commits do repositorio remoto.
$ git rm -> Remove um arquivo.
$ git mv -> Move um arquivo.
$ git diff -> Mostra a diferença entre os arquivos que serão comitados e suas
atuais modificações
$ git status -> Mostra o status de cada arquivo.
$ git branch <Nome-do-Branch> -> Cria um branch com o nome passado.
$ git checkout <Nome-di-Branch> -> Vai para o branch com o nome passado. O 
branch tem que existir.
