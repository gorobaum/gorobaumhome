Porque usar controle de versão :
->O git é um controle de versão. Um controle de versão é um sistema
que controla todas as mudanças em arquivos pelo tempo. Com ele podemos
reverter mudanças feitas em arquivos e compartilhar as mudanças com outras
pessoas que tambem trabalham no projeto. Usaremos o git como controlador de
versões. As modificações ficam guardadas em repositorios.

Como iniciar um rep no git:
O github tem um bom tutorial para instalar e iniciar o git nessa página
Windows -> http://help.github.com/win-set-up-git/
Linux   -> http://help.github.com/linux-set-up-git/
MacOS   -> http://help.github.com/mac-set-up-git/

Como usar o git :
Agora que o git está instalado e o repositorio já está criado, podemos
começar a modificar nosso projeto. Todo arquivo no git tem dois status: Tracked
e Untracked. Arquvis Tracked serão adicionados no proximo commit. Para verificar
o status de cada arquivos usamos o comando git status. O comando git commit adic
iona os arquivos Tracked para o seu repositorio. Toda vez que um arquivo é modificado ele é marcado como Untracked. Para mudar o status de um arquivo para Tracked usamos o comando git add <Nome-do-Arquivo>. O comando git diff mostra a dife-rença entre os arquivos Untracked e os Tracked. Um arquivo pode estar Tracked e Untracked ao mesmo tempo, se dermos git add nele, modificarmos ele, e executarmos o git status, ele vai mostrar o mesmo arquivo nas duas partes, a que mostra os
arquivos que serão commitados e os que não serão. Isso quer dizer que a versão
não modificada do seu arquivo vai ser commitada, e não a mais nova. Para corri-
gir isso teriamos que dar git add no mesmo arquivo. Para remover um arquivo
do git usamos o comando git rm <Nome-do-Arquivo>.
O comando git mv file_from file_to move um arquivo.
O git commit só modifica os arquivos no seu repositorio local. Precisamos usar 
o comando git push para mandar as modificações para o repositorio no github. Se
a sua versão for mais nova que a do repositorio, o seu push será feito e as mo-
dificações serão feitas. Se não, usamos o comando git pull para pegar a versão
mais nova do repositorio e dar um merge com o nosso repositorio. Se houver
algum problema com o merge, por exemplo um arquivo que você modificou foi modi-
ficado no repositorio no github, você terá que abrir o arquivo e modifica-lo
manualmente para arrumá-lo. Depois disso, o git push poderá ser executado sem
problema.

Uma boa prática para isso é criar branches.
Branches são "copias" do projeto que não alteram o projeto original.
Imagine a seguinte situação: Você está trabalhando no horus eye e decide 
implementar uma inteligencia artificial melhor para as mumias. Se você fizer
isso enquanto está no repositorio master, o codigo não poderá ser compilado até
que você termine as modificações. Para isso, é aconcelhavel criar um branche
e trabalhar nele, e depois que a nova IA das mumias estiver pronta, damos merge
do branche com o master.
