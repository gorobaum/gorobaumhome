Porque usar controle de versão :
	O git é programa para controle de versão. Um programa de controle 
de versão que controla todas as mudanças em arquivos pelo tempo. Com ele podemos
reverter mudanças feitas em arquivos e compartilhar as mudanças com outras
pessoas que também trabalham no projeto. Usaremos o git como controlador de
versões. As modificações ficam guardadas em repositórios.

Como iniciar um rep no git:
	O github tem um bom tutorial para instalar e iniciar o git nessa página
Windows -> http://help.github.com/win-set-up-git/
Linux   -> http://help.github.com/linux-set-up-git/
MacOS   -> http://help.github.com/mac-set-up-git/

Como usar o git :
	Agora que o git está instalado e o repositório já está criado, podemos
começar a modificar nosso projeto. Todo arquivo no git tem dois status: Tracked
e Untracked. Arquivos Tracked serão adicionados no próximo commit. Para verifica
o status de cada arquivos usamos o comando git status. O comando git commit adic-
iona os arquivos Tracked para o seu repositório. Toda vez que um arquivo é modi-
ficado ele é marcado como Untracked. Para mudar o status de um arquivo para 
Tracked usamos o comando git add <Nome-do-Arquivo>. O comando git diff mostra a 
diferença entre os arquivos Untracked e os Tracked. Um arquivo pode estar Tracked
e Untracked ao mesmo tempo se dermos git add nele, modificarmos ele, e executar-
mos o git status, ele vai mostrar o mesmo arquivo nas duas partes, a que mostra 
os arquivos que serão commitados e os que não serão. Isso quer dizer que a versão
não modificada do seu arquivo vai ser commitada, e não a mais nova. Para corrigir
isso teriamos que dar git add no mesmo arquivo. Para remover um arquivo do git 
usamos o comando git rm <Nome-do-Arquivo>. O comando git mv file_from file_to 
move um arquivo.
	O git commit só modifica os arquivos no seu repositorio local. Precisamos 
usar o comando git push para mandar as modificações para o repositorio no github.
Se a sua versão for mais nova que a do repositorio, o seu push será feito e as 
modificações serão feitas. Se não, usamos o comando git pull para pegar a versão
mais nova do repositorio e dar um merge com o nosso repositorio. Se houver
algum problema com o merge, por exemplo um arquivo que você modificou foi modi-
ficado no repositorio no github, você terá que abrir o arquivo e modifica-lo
manualmente para arrumá-lo. Depois disso, o git push poderá ser executado sem
problema.

Resumo dos comandos ( e alguns novos ) :
$ git clone -> Copia um repositorio remoto para a atual localização.
$ git add <Arquivo> -> Adiciona o arquivo para ser commitado.
$ git commit -> Comita as atuais modificações para o seu repositorio local.
$ git push -> Mandas os atuais commits para o repositorio remoto.
$ git pull -> Puxa os commits do repositorio remoto.
$ git rm -> Remove um arquivo.
$ git mv -> Move um arquivo.
$ git diff -> Mostra a diferença entre os arquivos que serão comitados e suas
atuais modificações
$ git status -> Mostra o status de cada arquivo.
$ git branch <Nome-do-Branch> -> Cria um branch com o nome passado.
$ git checkout <Nome-di-Branch> -> Vai para o branch com o nome passado. O 
branch tem que existir.

Git no Windows usando o tortoise git:
    Primeiro precisamos instalar os seguintes arquivos:
    - msysgit       http://code.google.com/p/msysgit/
    - Tortoise Git  http://code.google.com/p/tortoisegit/
    - PuTTY         http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html
Baixe as versoes mais novas, e instale tudo normalmente, sem mudar nenhuma opcao,
a nao ser que seja de sua preferencia.

Agora, precisamos configurar uma chave de ssh para que se computador possa con-
versar com o repositorio remoto.

Va ate a pasta em que o PuTTY foi instalado e abra o executavel puttygen (IMAGE1)
Clique em Generate, depois digite uma senha no campo Key passphrase ( essa senha
sera pedida toda vez que voce fizer um push ou um pull. Nao a esqueca! )
Clique em save private key, e salve a senha num lugar onde voce possa achar fa-
cilmente. Copie o conteudo da sua chave e abra o site do github.
Na secao Account settings, va em SSH Public Keys e adicione o que voce copiou co-
mo uma nova chave ssh.
Agora va ate a pasta onde o repositorio Dummy vai ficar, clique com o botao direito
em qualquer lugar e escolha Git Clone.
Uma janela ira abrir, coloque os seguindes dados nela:
Url : git@github.com:gorobaum:DummyRep.git ( isso que dizer que voce vai baixar
o repositorio DummyRep, que esta no servidor do github, e o "dono" do rep e 
gorobaum [ eu =D ] )
Selecione a opcao PuTTY key e aponte a direcao para a o arquivo que geramos que
contem sua chave SSH.
Com isso nos clonamos um repositorio.
Agora, crie uma pasta com o seu nome como nome e dentro da pasta um arquio de texto.
Escreva qualquer coisa nele. Em qualquer lugar, clique com o botao direito e 
va em TortoiseGit -> Add... . La, o arquivo que voce acabou de criar vai aparecer.
Nessa janela vamos escolher o que sera adiconado e o que nao sera no proximo commit.
Selecione o arquivo e clique em OK. Na proxima janela clique em Commit... e escreva
uma mensagem curta que diga o que voce esta fazendo. Va ate o menu do tortoise git
e clique em push. Isso vai mandar as modificacoes pro repositorio remoto. 
Agora crie outro arquivo chamado TRASH e repita a operacao. Selecione o arquivo
TRASH, e no menu do tortoise seleciona delete. Isso vai deletar ele localmente e
fazer com que o proximo commit delete ele tambem. DE outro push. Lembre-se que
as modificacoes no repositorio remoto so sao feitas apos um push.
Vamos criar um branch agora. Va no menu do tortoise e clique em Create Branch.
Nomei-o de teste1. Agora volte para o menu e selecione Switch/Checkout e escolha
o teste1 entre os Branchs. Modifique o seu arquivo de texto e commite a mudanca.
Volte para o master. Faca uma modificacao diferente no seu arquivo de texto e de 
commit. Selecione a opcao merge no menu. No campo Branch selecione o teste1. 
O merge vai falhar, pois existe um conflito entre os dois arquivos de texto de 
cada um dos branchs. Abra o arquivo de texto. Para resolver um erro no merge, temos
que modificar o arquivo manualmente. A parte que estiver entre as marcas <<<<<<HEAD
e ========= e a que esta no branch HEAD. O que estiver entre ======= e >>>>>>teste1
e a parte do arquivo que esta no branch teste1. Resolva o merge e de commit. Agora de push.
Pronto.
 
