#lang plai

(define-type Binding
  [binding (name symbol?) (named-expr WAE?)])

(define-type WAE
  [num (n number?)]
  [binop (op procedure?) (lhs WAE?) (rhs WAE?)]
  [with (lob (listof Binding?)) (body WAE?)]
  [id (name symbol?)])

;; parse : s-exp -> WAE
;; Consumes an s-expression and generates the corresponding WAE
(define (parse sexp)
    (cond
        [(number? sexp) (num sexp)]
        [(symbol? sexp) (id sexp)]
        [(list? sexp)
         (if ( = (length sexp) 3 )
            (case (first sexp)
                [(+) ( binop +  ( parse (second sexp) ) 
                                ( parse (third sexp) ) ) ]
                [(-) ( binop -  ( parse (second sexp) ) 
                                ( parse (third sexp) ) ) ]
                [(with) ( with  ( (cons (first(second sexp) )  
                                        (parse(second(second sexp) ) ) ) )
                                ( parse (third sexp) ) ) ]
                [else ( error 'parse "Esperado '+ '- ou with." ) ] )
          (error 'parse "Operacoes binarias e with esperao 3 parametros." ) ) ]
        [else ( error 'parse "Entrada invalida para o parser." ) ] ) )

(parse(read))
